{"tagline":"Ruby client for beanstalkd","google":"","note":"Don't delete this file! It's used internally to help with page regeneration.","name":"beanstalk-client-ruby","body":"# Beanstalk Ruby Client\r\n\r\nBeanstalk is a simple, fast work queue. Its interface is generic, but was\r\noriginally designed for reducing the latency of page views in high-volume web\r\napplications by running time-consuming tasks asynchronously.\r\n\r\n## Installation\r\n\r\nInstall beanstalk-client as a gem:\r\n\r\n```\r\ngem install beanstalk-client\r\n```\r\n\r\nor add to your Gemfile:\r\n\r\n```ruby\r\n# Gemfile\r\ngem 'beanstalk-client'\r\n```\r\n\r\nand run `bundle install` to install the dependency.\r\n\r\n## Usage\r\n\r\n### Connection\r\n\r\nTo interact with a beanstalk queue, first establish a client connection by providing host and port:\r\n\r\n```ruby\r\n@beanstalk = Beanstalk::Pool.new(['10.0.1.5:11300'])\r\n```\r\n\r\n### Tubes\r\n\r\nThe system has one or more tubes which contain jobs. Each tube consists of a ready queue and a delay queue for jobs. \r\nWhen a client connects, its watch list is initially just the tube named `default`. \r\nIf it submits jobs without having sent a `use` command, they will live in the tube named `default`.\r\nYou can specify the tube for a connection with:\r\n\r\n```ruby\r\n@beanstalk.use \"some-tube-here\" # 'default' if unspecified\r\n```\r\n\r\nTube names are at most 200 bytes. It specifies the tube to use. \r\nIf the tube does not exist, it will be created.\r\n\r\n### Jobs\r\n\r\nA job in beanstalk gets created by a client and includes a 'body' which con contain all relevant job metadata.\r\nWith BeanEater, a job is enqueued onto beanstalk and then later reserved and processed. \r\nHere is a picture of the typical job lifecycle:\r\n\r\n```\r\n   put            reserve               delete\r\n  -----> [READY] ---------> [RESERVED] --------> *poof*\r\n```\r\n\r\nYou can `put` a job onto the beanstalk queue using the `put` command:\r\n\r\n```ruby\r\n@beanstalk.put \"job-data-here\"\r\n```\r\n\r\nYou can also specify additional metadata to control job processing parameters. Specifically,\r\nyou can set the `priority`, `delay`, and `ttr` of a particular job:\r\n\r\n```ruby\r\n# defaults are priority 0, delay of 0 and ttr of 120 seconds\r\n@beanstalk.put \"job-data-here\", 1000, 50, 200\r\n```\r\n\r\nThe `priority` argument is an integer < 2**32. Jobs with a smaller priority take precedence over jobs with larger priorities. \r\nThe `delay` argument is an integer number of seconds to wait before putting the job in the ready queue.\r\nThe `ttr` argument is the time to run -- is an integer number of seconds to allow a worker to run this job. \r\n\r\n### Processing Jobs\r\n\r\nIn order to process jobs, the worker first needs to specify which tubes to `watch` for new jobs:\r\n\r\n```ruby\r\n@beanstalk = Beanstalk::Pool.new(['10.0.1.5:11300'])\r\n@beanstalk.watch('some-tube-name')\r\n@beanstalk.watch('some-other-tune')\r\n```\r\n\r\nand perhaps even which tubes to `ignore` (including 'default'):\r\n\r\n```ruby\r\n@beanstalk.ignore('default')\r\n```\r\n\r\nand then we can begin to `reserve` jobs. This will find the first job available and \r\nreturn the job for processing: \r\n\r\n```ruby\r\njob = @beanstalk.reserve\r\n# => <Beanstalk::Job>\r\nputs job.body\r\n# prints 'job-data-here'\r\n```\r\n\r\nYou can process each new job as they become available using a loop:\r\n\r\n```ruby\r\nloop do\r\n  job = beanstalk.reserve # waits for a job\r\n  puts job.body # prints \"hello\"\r\n  job.delete # remove job after processing\r\nend\r\n```\r\n\r\nBeanstalk jobs can also be buried if they fail, rather than deleted:\r\n\r\n```ruby\r\njob = @beanstalk.reserve\r\n# ...job fails...\r\njob.bury\r\n```\r\nBurying a job means that the job is pulled out of the \r\nqueue into a special 'holding' area for later inspection or reuse.\r\n\r\n### Stats\r\n\r\nBeanstalk has plenty of commands for introspecting the state of the queues and jobs. These methods include:\r\n\r\n```ruby\r\n# Get overall stats about the state of beanstalk and processing that has occured\r\n@beanstalk.stats\r\n\r\n# Get statistical information about the specified job if it exists\r\n@beanstalk.job_stats(some_job_id)\r\n\r\n# Get statistical information about the specified tube if it exists\r\n@beanstalk.stats_tube(some_tube_name)\r\n\r\n# The list-tubes command returns a list of all existing tubes\r\n@beanstalk.list_tubes\r\n\r\n# Returns the tube currently being used by the client\r\n@beanstalk.list_tube_used\r\n\r\n# Returns a list tubes currently being watched by the client\r\n@beanstalk.list_tubes_watched\r\n```\r\n\r\nBe sure to check the [beanstalk protocol](http://github.com/kr/beanstalkd/raw/master/doc/protocol.txt) file for\r\na more detailed looks at stats commands.\r\n\r\n## Resources\r\n\r\nThere are other resources helpful when learning about beanstalk:\r\n\r\n * [Beanstalkd homepage](http://kr.github.com/beanstalkd/)\r\n * [beanstalk-ruby-client](https://github.com/kr/beanstalk-client-ruby)\r\n * [beanstalk protocol](http://github.com/kr/beanstalkd/raw/master/doc/protocol.txt)\r\n\r\n## Contributors\r\n\r\n - Isaac Feliu\r\n - Peter Kieltyka\r\n - Martyn Loughran\r\n - Dustin Sallings"}